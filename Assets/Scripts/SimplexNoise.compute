#pragma kernel CSSimplex
#include "./FastNoiseLite.hlsl"

RWStructuredBuffer<float> noiseBuffer;

static const float magnitude = 4000;

float x;
float y;
float z;
int seed;
int seed1;
int size;

int GetPos(int x, int y, int z)
{
    return x * size * size + y * size + z;
}


[numthreads(8,8,8)]
void CSSimplex (uint3 id : SV_DispatchThreadID)
{
    fnl_state noise1 = fnlCreateState(seed, 0.0025f);
    fnl_state noise2 = fnlCreateState(seed, 0.005f);
    fnl_state noise3 = fnlCreateState(seed, 0.01f);
    fnl_state noise4 = fnlCreateState(seed, 0.02f);
    
    float n1 = fnlGetNoise3D(noise1, id.x * magnitude, id.y * magnitude, id.z * magnitude);
    float n2 = fnlGetNoise3D(noise2, id.x * magnitude/2, id.y * magnitude/2, id.z * magnitude/2);
    float n3 = fnlGetNoise3D(noise3, id.x * magnitude/4, id.y * magnitude/4, id.z * magnitude/4);
    float n4 = fnlGetNoise3D(noise4, id.x * magnitude/8, id.y * magnitude/8, id.z * magnitude/8);

    float combinedNoise = n1 + n2 + n3 + n4;
    
    combinedNoise *= 2.25f;
    combinedNoise += 1;
    combinedNoise /= 2;
    
    noiseBuffer[GetPos(id.x, id.y, id.z)] *= combinedNoise;
}
